@page "/mensajes"
@using Proyecto2025.Servicio.ServiciosHttp
@using Proyecto2025.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client

@inject IHttpServicio http
@inject NavigationManager navHttp

<h3>💬 Chat</h3>

<div class="chat-container">
    <div class="messages-box">
        @if (mensajes == null)
        {
            <p>Cargando mensajes...</p>
        }
        else if (mensajes.Count == 0)
        {
            <p>No hay mensajes aún.</p>
        }
        else
        {
            @foreach (var mensaje in mensajes)
            {
                <div class="message">
                    <b>@mensaje.SenderName:</b> @mensaje.Content
                </div>
            }
        }
    </div>

    <div class="input-area">
        <input @bind="nuevoMensaje.Content" @bind:event="oninput"
               placeholder="Escribe un mensaje..." class="form-control" />
        <button class="btn btn-primary" @onclick="EnviarMensaje">Enviar</button>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    List<VerMensajesDTO> mensajes = new();
    CrearMensajeDTO nuevoMensaje = new();
    string Mensaje = "";
    private readonly int chatId = 2; // ID del chat actual (debería cambiar segun el chat en la version final)


    protected override async Task OnInitializedAsync()
    {
        await LeerMensajes();
        // Si el servidor y cliente comparten origen:
        var hubUrl = navHttp.ToAbsoluteUri("/messagehub");
        // Si el servidor está en otro puerto, usa new Uri("https://localhost:7016/messagehub")

        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .WithAutomaticReconnect()
            .Build();

        // Suscribirse al evento. Asegúrate que el servidor envía un objeto compatible con VerMensajesDTO
        hubConnection.On<VerMensajesDTO>("ReceiveMessage", (msg) =>
        {
            mensajes.Add(msg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        // Unirse al grupo del chat para recibir solo mensajes de ese chat
        await hubConnection.SendAsync("JoinGroup", $"chat-{chatId}");
    }

    private async Task LeerMensajes()

    {
        var resp = await http.Get<List<VerMensajesDTO>>("api/message");
        if(!resp.Error)
        {
            mensajes = resp.Respuesta;
        }

    }

    private async Task EnviarMensaje()
    {
        //validacion basica

        if (nuevoMensaje == null || string.IsNullOrWhiteSpace(nuevoMensaje.Content))
        {
            Mensaje = "Escribe un mensaje antes de enviar.";
            return;
        }
        //asignar las propiedades necesarias al DTO antes de enviarlo

        nuevoMensaje.ChatId = 2; //esto deberia ser el id del chat actual
        nuevoMensaje.SenderId = 3; //esto deberia ser el id del usuario logueado
        nuevoMensaje.MessageType = "text"; //tipo de mensaje
        nuevoMensaje.SentAt = DateTime.UtcNow; //fecha y hora actual en UTC

        //enviar el mensaje 400 si el DTO exige Mediafile, enviar array vacio si no hay archivo
        var httpResp = await http.Post<CrearMensajeDTO, long>("api/message", nuevoMensaje);

        //actualizar la lista de mensajes despues de enviar
        await LeerMensajes();

        //limpiar textbox
        nuevoMensaje.Content = string.Empty;
        Mensaje = string.Empty;
   }
    }
    }

    
         
    
    
       
       
       
    
