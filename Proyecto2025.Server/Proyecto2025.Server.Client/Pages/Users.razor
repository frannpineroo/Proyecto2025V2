@page "/user"
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Lista de Usuarios</h1>

@if (user == null)
{
    <p><em>Cargando usuarios...</em></p>
}
else if (!user.Any())
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <div class="mb-3">
        <p><strong>Total de usuarios:</strong> @user.Count()</p>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Rol</th>
                    <th>Estado</th>
                    <th>En línea</th>
                    <th>Fecha Creación</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in user)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Email</td>
                        <td>
                            @if (user.Role != null)
                            {
                                <span class="badge bg-info">@user.Role.Name</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Sin rol</span>
                            }
                        </td>
                        <td>
                            @if (user.IsActive)
                            {
                                <span class="badge bg-success">Activo</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Inactivo</span>
                            }
                        </td>
                        <td>
                            @if (user.IsOnline)
                            {
                                <span class="text-success">●</span>
                            }
                            else
                            {
                                <span class="text-muted">○</span>
                            }
                        </td>
                        <td>@user.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="LoadUsers">
        <i class="fas fa-sync-alt"></i> Actualizar Lista
    </button>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private List<User>? user;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            errorMessage = null;
            user = null; // Mostrar loading

            // Ajusta la URL según tu configuración de API
            user = await Http.GetFromJsonAsync<List<User>>("api/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar usuarios: {ex.Message}";
            user = new List<User>(); // Lista vacía para evitar null
        }
    }

    // Clases para mapear la respuesta JSON
    public class User
    {
        public long Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public bool IsOnline { get; set; }
        public bool IsActive { get; set; }
        public int EstadoRegistro { get; set; }
        public DateTime CreatedAt { get; set; }
        public long? OrganizationId { get; set; }
        public long RoleId { get; set; }
        public Role? Role { get; set; }
    }

    public class Role
    {
        public long Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}

