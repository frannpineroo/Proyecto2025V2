@page "/chat"
@using Proyecto2025.Servicio.ServiciosHttp

@inject IHttpServicio http

<h3>Listar Chat</h3>
<br />
<a class="btn btn-primary" target="_blank" href="/chat/crear">Crear Nuevo miembro </a>
<br />
<table>
    <tr>
        <th>chat</th>
    </tr>
    @if (registro == null)
    {
        <p>  buscando .... </p>
    }
    else if (registro.Count == 0)
    {
        <p> no hay registros cargados</p>
    }
    else
    {
        @foreach (var reg in registro)
        {
            <tr>
                <td>@reg.Name</td>
                <td>@reg.IsGroup</td>
                <td>@reg.IsModerated</td>
                <td>
                    <a class="btn btn-primary"
                    href="/chat/editar/{registro.Id}">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-danger"
                    @onclick="() => Borrar(reg)">
                        Borrar
                    </button>
                </td>

            </tr>
        }
    }

</table>
<br />
<p>@mensaje</p>

@code {
    List<ListaChatDTO>? registro;
    string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerRegistros();
    }

    private async Task LeerRegistros()
    {
        // await Task.Delay(2000);
        // registro = new List<RegistroUsuarioDTO>();
        // await Task.Delay(2000);
        // registro.Add(new RegistroUsuarioDTO { codigoingreso = 1, nombre = "Dante", apellido = "Gomez" });
        // await Task.Delay(2000);
        // registro.Add(new RegistroUsuarioDTO { codigoingreso = 1, nombre = "Vandal", apellido = "Abad" });

        //registro = await Http.GetFromJsonAsync<List<RegistroUsuarioDTO>>("api/registrousuario/registro");

        var respuesta = await http.Get<List<ListaChatDTO>>("api/Chat");
        //var respuesta = await Http.GetEsAsync<List<ListaChatDTO>>("api/Chat");//("api/chat/por-chat-lista/1"); // esto es de prueba el de arriba anda bien, pero falta hacer el endpoint en el backend
        if (!respuesta.Error)
        {
            registro = respuesta.Respuesta;
        }
        else
        {
            mensaje = respuesta.ObtenerError();
        }

    }

    // private async Task Editar(ListaChatsDTO reg)
    // {
    //     // navegar a la pagina de edicion

    //         if (id != (long)typeof(E).GetProperty("Id")!.GetValue(reg)!)
    //         {
    //             throw new ArgumentException("El ID de la entidad no coincide con el ID proporcionado.");
    //         }
    //         var respuesta = await Http.Set<E>().FindAsync(id);
    //         if (respuesta == null)
    //         {
    //             throw new KeyNotFoundException("La entidad no existe.");
    //         }
    //         try
    //         {
    //             respuesta.Set<E>().Update(reg);
    //             await respuesta.SaveChangesAsync();
    //             return true;
    //         }
    //         catch (Exception e)
    //         {
    //             // Manejo de excepciones, logueo, etc.
    //             throw new Exception("Error al actualizar la entidad.", e);
    //         }


    // }

    private async Task Borrar(ListaChatDTO reg)
    {
        var respuesta = await http.Delete($"api/chat/{reg.Id}");
        if (respuesta.Error)
        {
            mensaje = respuesta.ObtenerError();
        }
        await LeerRegistros();
    }

}